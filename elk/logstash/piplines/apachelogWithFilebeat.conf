input {

	beats {
		port => 5044
		host => "0.0.0.0"
	}
	
}

filter {
	
	if [event][dataset] != "apache.access" {

	 	drop { }
	}

	grok {
	   match => {
	   	 "message" => [
	   	 	"%{IPORHOST:[destination][domain]} %{IPORHOST:[source][ip]} - %{DATA:[user][name]} \[%{HTTPDATE:[apache][access][time]}\] \"(?:%{WORD:[http][request][method} %{DATA:[url][original]} HTTP/%{NUMBER:[http][version]}|-)?\" %{NUMBER:[http][response][status_code]:long} (?:%{NUMBER:[http][response][body][bytes]:long}|-)( \"%{DATA:[http][request][referrer]}\")?( \"%{DATA:[user_agent][original]}\")?",
                  
                  "%{IPORHOST:[source][address]} - %{DATA:[user][name]} \[%{HTTPDATE:[apache][access][time]}\] \"(?:%{WORD:[http][request][method} %{DATA:[url][original]} HTTP/%{NUMBER:[http][version}|-)?\" %{NUMBER:[http][response][status_code]:long} (?:%{NUMBER:[http][response][body][bytes]:long}|-)( \"%{DATA:[http][request][referrer]}\")?( \"%{DATA:[user_agent][original]}\")?",
                  "
                  %{IPORHOST:[source][address]} - %{DATA:[user][name]} \[%{HTTPDATE:[apache][access][time]}\] \"-\" %{NUMBER:[http][response][status_code]:long} -",
                  
                  "\[%{HTTPDATE:[apache][access][time]}\] %{IPORHOST:[source][address]} %{DATA:[apache][access][ssl].protocol]} %{DATA:[apache][access][ssl][cipher]} \"%{WORD:[http][request][method]} %{DATA:[url][original]} HTTP/%{NUMBER:[http][version]}\" (-|%{NUMBER:[http][response][body][bytes]:long})"
	   	 ]
	   }

	   remove_field => "message"
	}

	if "_grokparsefailure" in [tags] {
		drop { }
	}

	grok {

		match => {
			 "[source][address]" => "^(%{IP:[source][ip]}|%{HOSTNAME:[source][domain]})$
		}
	}

	mutate {

		add_field => { "[event][created]" => "%{@timestamp}"}
	}

	date {
		match => ["[apache][access][time]", "dd/MMM/yyyy:H:m:s Z"]
		remove_field => "[apache][access][time]"
	}

}

output {
	
	stdout {
		codec => rubydebug {
		  metadata => true
		}
	}
}