{"version":3,"sources":["client/UseCase.js","client/ExecutionResultRender.js","client/PocContainer.js","App.js","serviceWorker.js","index.js"],"names":["UseCase","props","matched","useCase","name","selectedUseCaseName","className","onClick","callback","id","style","ExecutionResultRender","this","serverOutput","Component","PocContainer","setSelectedUseCase","console","log","setState","selectedUseCase","executeCommand","axios","get","params","then","res","data","state","useCases","map","tempUseCase","key","App","output","usecases","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4TAEe,SAASA,EAAQC,GAE9B,IAAIC,EAAUD,EAAME,QAAQC,OAASH,EAAMI,oBAC3C,OAEE,yBAAKC,UAAU,WACb,4BACEC,QAAS,kBAAMN,EAAMO,SAASP,EAAME,UACpCG,UAAU,iBACVG,GAAG,gBACHC,MAAO,CAAC,mBAAoBR,EAAS,UAAU,KAE9CD,EAAME,QAAQC,O,ICZFO,E,iLAwBjB,OACE,yBAAKF,GAAG,mBACN,6BACE,8BAAOG,KAAKX,MAAMY,aAAlB,W,GA3ByCC,aCG9BC,E,YACnB,WAAYd,GAAQ,IAAD,8BACjB,4CAAMA,KA4CRe,mBAAqB,SAAAb,GACnBc,QAAQC,IAAI,oBAAqBf,GACjC,EAAKgB,SAAS,CAAEN,aAAc,gBAAiBO,gBAAiBjB,EAASE,oBAAqBF,EAAQC,OACtG,EAAKiB,eAAelB,IAhDH,EAmDnBkB,eAAiB,SAAAlB,GACfmB,IACGC,IAAI,gCAAiC,CACpCC,OAAO,eAAMrB,KAEdsB,MAAK,SAAAC,GACJ,IAAMC,EAAOD,EAAIC,KACjB,EAAKR,SAAS,CAAEN,aAAcc,EAAMP,gBAAiBjB,QAxDzD,EAAKyB,MAAQ,CACXR,gBAAiB,EAAKnB,MAAM4B,SAAS,GACrChB,aAAc,KACdR,oBAAoB,EAAKJ,MAAM4B,SAAS,GAAGzB,MAL5B,E,sEAQT,IAAD,OACP,OACE,yBAAKE,UAAU,YAAYG,GAAG,kBAC5B,yBAAKH,UAAU,OACb,wBAAIA,UAAU,kBAAkBG,GAAG,cAAnC,wBAKF,yBAAKH,UAAU,OACZM,KAAKX,MAAM4B,UACVjB,KAAKX,MAAM4B,SAASC,KAAI,SAAAC,GAAW,OACjC,kBAAC/B,EAAD,CACEgC,IAAKD,EAAYtB,GACjBN,QAAS4B,EACTvB,SAAU,EAAKQ,mBACfX,oBAAqB,EAAKuB,MAAMvB,0BAKxC,yBAAKC,UAAU,MAAMG,GAAG,wBAAxB,mBAG4B,MAA3BG,KAAKgB,MAAMf,cACV,yBAAKP,UAAU,OACb,kBAAC,EAAD,CAAuBO,aAAcD,KAAKgB,MAAMf,mB,0CAOxDD,KAAKS,eAAeT,KAAKgB,MAAMR,qB,GA1CON,aCArBmB,E,YACnB,WAAYhC,GAAQ,IAAD,8BACjB,4CAAMA,KAED2B,MAAQ,CACXM,OAAQ,GACRL,SAAU,IALK,E,iFASE,IAAD,OAClBP,IAAMC,IAAI,6CAA6CE,MAAK,SAAAC,GAC1D,IAAMC,EAAOD,EAAIC,KACjBV,QAAQC,IAAI,iBAAkBS,GAC9B,EAAKR,SAAS,CAAEU,SAAUF,EAAKQ,gB,+BAKjC,OAAIvB,KAAKgB,MAAMC,SAASO,OAAS,EACxB,kBAAC,EAAD,CAAcP,SAAUjB,KAAKgB,MAAMC,WAC9B,S,GArBef,aCObuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,kB","file":"static/js/main.426ef4f2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function UseCase(props) {\r\n\r\n  let matched = props.useCase.name === props.selectedUseCaseName;\r\n  return (\r\n    \r\n    <div className=\"m-2 col\">\r\n      <button\r\n        onClick={() => props.callback(props.useCase)}\r\n        className=\"btn col-md p-3\"\r\n        id=\"useCaseButton\"        \r\n        style={{'background-color': matched ?'#E05CC1':''}}\r\n      >\r\n        {props.useCase.name}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class ExecutionResultRender extends Component {\r\n   /**\r\n   * get usecase from props and pass to Get request.\r\n   */\r\n  /* componentDidMount() {\r\n    this.executeCommand();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    console.log(\"Load command result again for given \", this.props.useCase);\r\n    this.executeCommand();\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    console.log(\"***************\");\r\n    console.log(\"Need to update (object) \", this.props.useCase);\r\n    console.log(\"Need to update (!)\", !this.props.useCase);\r\n    console.log(\"Need to update- next  (object) \",nextProps.useCase);\r\n    console.log(\"Need to update -next (!)\", !nextProps.useCase);\r\n    console.log(\"Need to update (condition)\", !this.props.useCase || nextProps.useCase !== this.props.useCase);\r\n    return !nextProps.useCase || nextProps.useCase !== this.props.useCase;\r\n  } */\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"resultRenderDiv\">\r\n        <pre>          \r\n          <span>{this.props.serverOutput} </span>\r\n        </pre>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport UseCase from \"./UseCase\";\r\nimport ExecutionResultRender from \"./ExecutionResultRender\";\r\nimport axios from \"axios\";\r\n\r\nexport default class PocContainer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      selectedUseCase: this.props.useCases[0],\r\n      serverOutput: null,\r\n      selectedUseCaseName:this.props.useCases[0].name\r\n    };\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"container\" id=\"myPocContainer\">\r\n        <div className=\"row\">\r\n          <h2 className=\"col text-center\" id=\"myUsecases\">\r\n            Available Use Cases\r\n          </h2>\r\n        </div>\r\n\r\n        <div className=\"row\">\r\n          {this.props.useCases &&\r\n            this.props.useCases.map(tempUseCase => (\r\n              <UseCase\r\n                key={tempUseCase.id}\r\n                useCase={tempUseCase}\r\n                callback={this.setSelectedUseCase}\r\n                selectedUseCaseName={this.state.selectedUseCaseName}\r\n              />\r\n            ))}\r\n        </div>\r\n\r\n        <div className=\"row\" id=\"myHorizontalSeprator\">\r\n          Usecase Results\r\n        </div>\r\n        {this.state.serverOutput != null && (\r\n          <div className=\"row\">\r\n            <ExecutionResultRender serverOutput={this.state.serverOutput} />\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n  componentDidMount() {\r\n    this.executeCommand(this.state.selectedUseCase);\r\n  }\r\n\r\n  //set current usecase by click\r\n  setSelectedUseCase = useCase => {\r\n    console.log(\"Selected Usecase \", useCase);\r\n    this.setState({ serverOutput: 'Please wait..', selectedUseCase: useCase, selectedUseCaseName: useCase.name});\r\n    this.executeCommand(useCase);\r\n  };\r\n\r\n  executeCommand = useCase => {\r\n    axios\r\n      .get(\"http://localhost:4000/execute\", {\r\n        params: { ...useCase }\r\n      })\r\n      .then(res => {\r\n        const data = res.data;\r\n        this.setState({ serverOutput: data, selectedUseCase: useCase });\r\n      });\r\n  };\r\n}\r\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport PocContainer from \"./client/PocContainer\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      output: \"\",\n      useCases: []\n    };\n  }\n\n  componentDidMount() {\n    axios.get(\"http://localhost:4000/static/usecase.json\").then(res => {\n      const data = res.data;\n      console.log(\"useCases from \", data);\n      this.setState({ useCases: data.usecases });\n    });\n  }\n\n  render() {\n    if (this.state.useCases.length > 0) {\n      return <PocContainer useCases={this.state.useCases} />;\n    } else return null;\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}